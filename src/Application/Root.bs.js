// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var ReactDOMRe = require("reason-react/src/legacy/ReactDOMRe.bs.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var ReasonReact = require("reason-react/src/legacy/ReasonReact.bs.js");
var Routing$ReactTemplate = require("../Routing.bs.js");
var Operator$ReactTemplate = require("../Operator.bs.js");
var UrlParser$ReactTemplate = require("../UrlParser.bs.js");
var GlobalStateManagement$ReactTemplate = require("../Samples/GlobalStateManagement.bs.js");

function timePromise(count) {
  return new Promise((function (resolve, param) {
                setTimeout((function (param) {
                        return resolve(count);
                      }), count);
                
              }));
}

var Utils = {
  timePromise: timePromise
};

function $eq$eq$great(a, b) {
  return [
          a,
          b
        ];
}

function fetchDataHome(str) {
  return str + "!";
}

var HomeExternalServiceImpl = {
  fetchDataHome: fetchDataHome
};

function fetchDataAbout(str) {
  return str + "!";
}

var AboutExternalServiceImpl = {
  fetchDataAbout: fetchDataAbout
};

var AllExternalSerciceImpl = {
  fetchDataHome: fetchDataHome,
  fetchDataAbout: fetchDataAbout
};

function getMessages(param) {
  return param.messages;
}

var StateManagementDef = {
  getMessages: getMessages
};

function MakeHomeContainer(Store, HomeExternalService) {
  var component = ReasonReact.statelessComponent("HomeContainer");
  var Root$MakeHomeContainer = function (Props) {
    var number = Props.number;
    var __x = GlobalStateManagement$ReactTemplate.Manager.getState(Store.store).notification;
    var notification = Belt_Option.getWithDefault(Belt_Option.map(__x, (function (param) {
                return Operator$ReactTemplate.$great$great(getMessages, List.hd, param);
              })), "");
    return React.createElement("div", undefined, React.createElement("div", undefined, String(number)), React.createElement("div", undefined, notification), Curry._1(HomeExternalService.fetchDataHome, "HOME"));
  };
  return {
          component: component,
          make: Root$MakeHomeContainer
        };
}

function MakeAboutContainer(Store, AboutExternalService) {
  var component = ReasonReact.statelessComponent("AboutContainer");
  var Root$MakeAboutContainer = function (Props) {
    var string = Props.string;
    return React.createElement("div", undefined, React.createElement("div", undefined, string));
  };
  return {
          component: component,
          make: Root$MakeAboutContainer
        };
}

function MainContentRouting(Store, Service) {
  var component = ReasonReact.statelessComponent("HomeContainer");
  var Root$MakeHomeContainer = function (Props) {
    var number = Props.number;
    var __x = GlobalStateManagement$ReactTemplate.Manager.getState(Store.store).notification;
    var notification = Belt_Option.getWithDefault(Belt_Option.map(__x, (function (param) {
                return Operator$ReactTemplate.$great$great(getMessages, List.hd, param);
              })), "");
    return React.createElement("div", undefined, React.createElement("div", undefined, String(number)), React.createElement("div", undefined, notification), Curry._1(Service.fetchDataHome, "HOME"));
  };
  var component$1 = ReasonReact.statelessComponent("AboutContainer");
  var Root$MakeAboutContainer = function (Props) {
    var string = Props.string;
    return React.createElement("div", undefined, React.createElement("div", undefined, string));
  };
  var homeRoute = UrlParser$ReactTemplate.toRoute((function (intValue) {
          return {
                  TAG: 0,
                  _0: intValue,
                  [Symbol.for("name")]: "Home"
                };
        }), UrlParser$ReactTemplate.$pipe$question(UrlParser$ReactTemplate.$slash(UrlParser$ReactTemplate.$slash(UrlParser$ReactTemplate.top, UrlParser$ReactTemplate.s("src")), UrlParser$ReactTemplate.s("index.html")), UrlParser$ReactTemplate.intParamWithDefault("name", 0)));
  var aboutRoute = UrlParser$ReactTemplate.toRoute((function (str) {
          return {
                  TAG: 1,
                  _0: str,
                  [Symbol.for("name")]: "About"
                };
        }), UrlParser$ReactTemplate.$slash(UrlParser$ReactTemplate.$slash(UrlParser$ReactTemplate.top, UrlParser$ReactTemplate.s("about")), UrlParser$ReactTemplate.string(undefined)));
  var urlToRoute2 = UrlParser$ReactTemplate.oneOf(UrlParser$ReactTemplate.$neg$great$great(homeRoute, aboutRoute));
  var urlToRoute = function (url, queryParam) {
    return Belt_Option.getExn(UrlParser$ReactTemplate.parseRouterUrl(urlToRoute2, url));
  };
  var transition = function (route) {
    if (typeof route === "number") {
      return Promise.resolve(React.createElement("div", undefined, "NF"));
    }
    if (route.TAG !== /* Home */0) {
      return Promise.resolve(React.createElement(Root$MakeAboutContainer, {
                      string: Curry._1(Service.fetchDataAbout, route._0)
                    }));
    }
    var number = route._0;
    return timePromise(3000).then(function (param) {
                return Promise.resolve(React.createElement(Root$MakeHomeContainer, {
                                number: number
                              }));
              });
  };
  return {
          urlToRoute: urlToRoute,
          transition: transition
        };
}

var initialState = {
  error: undefined,
  notification: undefined
};

function reducer(action, state) {
  if (action) {
    return [
            {
              error: action._0,
              notification: state.notification
            },
            /* [] */0
          ];
  } else {
    return [
            {
              error: undefined,
              notification: state.notification
            },
            /* [] */0
          ];
  }
}

var store = GlobalStateManagement$ReactTemplate.Manager.make(reducer, initialState);

function renderWithStore(render) {
  return Curry._1(render, store);
}

var App = {
  getMessages: getMessages,
  initialState: initialState,
  reducer: reducer,
  store: store,
  renderWithStore: renderWithStore
};

function showErrorModal(error, refreshError) {
  return React.createElement("div", undefined, $$Array.of_list(List.map((function (prim) {
                        return prim;
                      }), error.messages)), React.createElement("div", {
                  onClick: (function (param) {
                      return Curry._1(refreshError, undefined);
                    })
                }));
}

function header(param) {
  return React.createElement("div", undefined, "IAM HEADER");
}

function AppRoot(MainContent) {
  var blankPage = React.createElement("div", {
        className: "loading"
      });
  var Root$AppRoot = function (Props) {
    var store = Props.store;
    return React.createElement(React.Fragment, {
                children: null
              }, header(undefined), React.createElement(MainContent.make, {
                    initialPage: blankPage,
                    onError: (function (param) {
                        return GlobalStateManagement$ReactTemplate.Manager.dispatch(store, {
                                    _0: {
                                      messages: {
                                        hd: "PagePrepareError",
                                        tl: /* [] */0
                                      }
                                    },
                                    [Symbol.for("name")]: "DetectedError"
                                  });
                      }),
                    onStartTransition: (function (param) {
                        console.log("start_transition");
                        
                      }),
                    onFinishTransition: (function (param) {
                        console.log("finish_transition");
                        
                      })
                  }));
  };
  return {
          blankPage: blankPage,
          make: Root$AppRoot
        };
}

var component = ReasonReact.statelessComponent("HomeContainer");

function Root$MakeHomeContainer(Props) {
  var number = Props.number;
  var __x = GlobalStateManagement$ReactTemplate.Manager.getState(store).notification;
  var notification = Belt_Option.getWithDefault(Belt_Option.map(__x, (function (param) {
              return Operator$ReactTemplate.$great$great(getMessages, List.hd, param);
            })), "");
  return React.createElement("div", undefined, React.createElement("div", undefined, String(number)), React.createElement("div", undefined, notification), fetchDataHome("HOME"));
}

var component$1 = ReasonReact.statelessComponent("AboutContainer");

function Root$MakeAboutContainer(Props) {
  var string = Props.string;
  return React.createElement("div", undefined, React.createElement("div", undefined, string));
}

var homeRoute = UrlParser$ReactTemplate.toRoute((function (intValue) {
        return {
                TAG: 0,
                _0: intValue,
                [Symbol.for("name")]: "Home"
              };
      }), UrlParser$ReactTemplate.$pipe$question(UrlParser$ReactTemplate.$slash(UrlParser$ReactTemplate.$slash(UrlParser$ReactTemplate.top, UrlParser$ReactTemplate.s("src")), UrlParser$ReactTemplate.s("index.html")), UrlParser$ReactTemplate.intParamWithDefault("name", 0)));

var aboutRoute = UrlParser$ReactTemplate.toRoute((function (str) {
        return {
                TAG: 1,
                _0: str,
                [Symbol.for("name")]: "About"
              };
      }), UrlParser$ReactTemplate.$slash(UrlParser$ReactTemplate.$slash(UrlParser$ReactTemplate.top, UrlParser$ReactTemplate.s("about")), UrlParser$ReactTemplate.string(undefined)));

var urlToRoute2 = UrlParser$ReactTemplate.oneOf(UrlParser$ReactTemplate.$neg$great$great(homeRoute, aboutRoute));

function urlToRoute(url, queryParam) {
  return Belt_Option.getExn(UrlParser$ReactTemplate.parseRouterUrl(urlToRoute2, url));
}

function transition(route) {
  if (typeof route === "number") {
    return Promise.resolve(React.createElement("div", undefined, "NF"));
  }
  if (route.TAG !== /* Home */0) {
    return Promise.resolve(React.createElement(Root$MakeAboutContainer, {
                    string: fetchDataAbout(route._0)
                  }));
  }
  var number = route._0;
  return timePromise(3000).then(function (param) {
              return Promise.resolve(React.createElement(Root$MakeHomeContainer, {
                              number: number
                            }));
            });
}

var MainContent = Routing$ReactTemplate.Application({
      urlToRoute: urlToRoute,
      transition: transition
    });

var blankPage = React.createElement("div", {
      className: "loading"
    });

function Root$AppRoot(Props) {
  var store = Props.store;
  return React.createElement(React.Fragment, {
              children: null
            }, header(undefined), React.createElement(MainContent.make, {
                  initialPage: blankPage,
                  onError: (function (param) {
                      return GlobalStateManagement$ReactTemplate.Manager.dispatch(store, {
                                  _0: {
                                    messages: {
                                      hd: "PagePrepareError",
                                      tl: /* [] */0
                                    }
                                  },
                                  [Symbol.for("name")]: "DetectedError"
                                });
                    }),
                  onStartTransition: (function (param) {
                      console.log("start_transition");
                      
                    }),
                  onFinishTransition: (function (param) {
                      console.log("finish_transition");
                      
                    })
                }));
}

var AppRootImpl = {
  blankPage: blankPage,
  make: Root$AppRoot
};

function render(param) {
  return ReactDOMRe.renderToElementWithId(React.createElement(Root$AppRoot, {
                  store: store
                }), "index");
}

exports.Utils = Utils;
exports.$eq$eq$great = $eq$eq$great;
exports.HomeExternalServiceImpl = HomeExternalServiceImpl;
exports.AboutExternalServiceImpl = AboutExternalServiceImpl;
exports.AllExternalSerciceImpl = AllExternalSerciceImpl;
exports.StateManagementDef = StateManagementDef;
exports.MakeHomeContainer = MakeHomeContainer;
exports.MakeAboutContainer = MakeAboutContainer;
exports.MainContentRouting = MainContentRouting;
exports.App = App;
exports.showErrorModal = showErrorModal;
exports.header = header;
exports.AppRoot = AppRoot;
exports.AppRootImpl = AppRootImpl;
exports.render = render;
/* store Not a pure module */
