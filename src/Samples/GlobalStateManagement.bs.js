// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");

function unsubscribe(store, listener, param) {
  store.listeners = List.filter(function (l) {
          return listener !== l;
        })(store.listeners);
  
}

function subscribe(store, listener) {
  store.listeners = {
    hd: listener,
    tl: store.listeners
  };
  return function (param) {
    return unsubscribe(store, listener, param);
  };
}

function getState(store) {
  return store.state;
}

function unsubscribeError(store, listener, param) {
  store.errorListeners = List.filter(function (l) {
          return listener !== l;
        })(store.errorListeners);
  
}

function subscribeError(store, listener) {
  store.errorListeners = {
    hd: listener,
    tl: store.errorListeners
  };
  return function (param) {
    return unsubscribeError(store, listener, param);
  };
}

function make(reducer, initialState) {
  return {
          state: initialState,
          reducer: reducer,
          listeners: /* [] */0,
          errorListeners: /* [] */0
        };
}

function dispatch(store, action) {
  var match = Curry._2(store.reducer, action, store.state);
  store.state = match[0];
  List.iter((function (listener) {
          return Curry._1(listener, undefined);
        }), store.listeners);
  List.iter((function (actionPromise) {
          actionPromise.then(function (wrapAction) {
                  dispatch(store, wrapAction);
                  return Promise.resolve(undefined);
                }).catch(function (error) {
                List.iter((function (listener) {
                        return Curry._1(listener, error);
                      }), store.errorListeners);
                return Promise.resolve(undefined);
              });
          
        }), match[1]);
  
}

var Manager = {
  unsubscribe: unsubscribe,
  subscribe: subscribe,
  getState: getState,
  unsubscribeError: unsubscribeError,
  subscribeError: subscribeError,
  make: make,
  dispatch: dispatch
};

function reducer(action, state) {
  if (action) {
    return [
            {
              value: state.value - 1 | 0,
              label: state.label
            },
            /* [] */0
          ];
  }
  var nextValue = state.value + 1 | 0;
  return [
          {
            value: nextValue,
            label: state.label
          },
          nextValue < 100 ? ({
                hd: Promise.resolve(/* Increment */0),
                tl: /* [] */0
              }) : /* [] */0
        ];
}

var manager = make(reducer, {
      value: 0,
      label: "_"
    });

subscribe(manager, (function (param) {
        console.log(manager.state);
        
      }));

dispatch(manager, /* Increment */0);

exports.Manager = Manager;
exports.reducer = reducer;
/* manager Not a pure module */
