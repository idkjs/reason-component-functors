// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var FlexibleTableHeader$ReactTemplate = require("./FlexibleTableHeader.bs.js");

function FlexibleTable(T) {
  var defaultHeaders = function (headerColumns) {
    return List.map(T.defaultHeader, headerColumns);
  };
  var headerItemToCell = function (header) {
    var width = FlexibleTableHeader$ReactTemplate.getWidthSize(header.size);
    return {
            column: header.column,
            style: {
              width: "" + width + "px"
            }
          };
  };
  var FlexibleTable$FlexibleTable = function (Props) {
    var datas = Props.datas;
    var headerItems = Props.headerItems;
    var row = Props.row;
    var header = Props.header;
    var footer = Props.footer;
    var tableClassName = Props.tableClassName;
    var match = React.useState(function () {
          return 0.0;
        });
    var tableWidth = match[0];
    var match$1 = React.useReducer((function (state, action) {
            return action._0;
          }), 0.0);
    var dispatch = match$1[1];
    var theRef = React.useRef(null);
    var apperTable = function (ref) {
      var tableDomToAction = function (tableDom) {
        var newtableWidth = tableDom.clientWidth;
        if (newtableWidth !== tableWidth) {
          return Curry._1(dispatch, {
                      _0: tableWidth,
                      [Symbol.for("name")]: "DetectedTableSize"
                    });
        }
        
      };
      if (!(ref == null)) {
        ref.addEventListener("transitionend", (function (param) {
                return tableDomToAction(ref);
              }));
        return tableDomToAction(ref);
      }
      
    };
    React.useEffect((function () {
            apperTable(theRef.current);
            
          }), [theRef]);
    var cells = List.map(headerItemToCell, FlexibleTableHeader$ReactTemplate.getWidthSizeByTableWidthSize(tableWidth, headerItems));
    var bodyRows = $$Array.of_list(List.map(Curry._1(row, cells), datas));
    var header$1 = Curry._1(header, cells);
    var footer$1 = Curry._1(footer, cells);
    return React.createElement("table", {
                ref: theRef,
                className: tableClassName
              }, React.createElement("thead", undefined, header$1), React.createElement("tbody", undefined, bodyRows), React.createElement("tfoot", undefined, footer$1));
  };
  return {
          defaultHeaders: defaultHeaders,
          headerItemToCell: headerItemToCell,
          make: FlexibleTable$FlexibleTable
        };
}

var getWidthSize = FlexibleTableHeader$ReactTemplate.getWidthSize;

var headerItemToJs = FlexibleTableHeader$ReactTemplate.headerItemToJs;

var headerItemFromJs = FlexibleTableHeader$ReactTemplate.headerItemFromJs;

var valueToString = FlexibleTableHeader$ReactTemplate.valueToString;

var stringFromValue = FlexibleTableHeader$ReactTemplate.stringFromValue;

var getWidthSizeByTableWidthSize = FlexibleTableHeader$ReactTemplate.getWidthSizeByTableWidthSize;

exports.getWidthSize = getWidthSize;
exports.headerItemToJs = headerItemToJs;
exports.headerItemFromJs = headerItemFromJs;
exports.valueToString = valueToString;
exports.stringFromValue = stringFromValue;
exports.getWidthSizeByTableWidthSize = getWidthSizeByTableWidthSize;
exports.FlexibleTable = FlexibleTable;
/* react Not a pure module */
