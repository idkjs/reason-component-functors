// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var ReactCompat = require("reason-react-compat/src/ReactCompat.bs.js");
var Helpers$ReactTemplate = require("./Helpers.bs.js");

function IncrementalSearch(D) {
  var IncrementalSearch$IncrementalSearch = function (Props) {
    var defaultText = Props.defaultText;
    var searchDelay = Props.searchDelay;
    var searchResultView = Props.searchResultView;
    return ReactCompat.useRecordApi({
                willReceiveProps: ReactCompat.component.willReceiveProps,
                willUnmount: ReactCompat.component.willUnmount,
                didUpdate: ReactCompat.component.didUpdate,
                shouldUpdate: ReactCompat.component.shouldUpdate,
                willUpdate: ReactCompat.component.willUpdate,
                didMount: (function (self) {
                    return Curry._1(self.send, {
                                TAG: 0,
                                _0: self.state.text,
                                [Symbol.for("name")]: "InputText"
                              });
                  }),
                initialState: (function (param) {
                    return {
                            text: Helpers$ReactTemplate.$$Option.withDefault("", defaultText),
                            entities: /* [] */0,
                            queueGetEntitesCommand: /* [] */0
                          };
                  }),
                reducer: (function (action, state) {
                    if (typeof action === "number") {
                      var match = state.queueGetEntitesCommand;
                      if (!match) {
                        return /* NoUpdate */0;
                      }
                      var tail = match.tl;
                      var command = match.hd;
                      if (tail) {
                        return {
                                TAG: 0,
                                _0: {
                                  text: state.text,
                                  entities: state.entities,
                                  queueGetEntitesCommand: tail
                                },
                                [Symbol.for("name")]: "Update"
                              };
                      } else {
                        return {
                                TAG: 2,
                                _0: {
                                  text: state.text,
                                  entities: state.entities,
                                  queueGetEntitesCommand: /* [] */0
                                },
                                _1: (function (self) {
                                    Curry._1(D.findEntities, command).then(function (entities) {
                                          return Promise.resolve(Curry._1(self.send, {
                                                          TAG: 1,
                                                          _0: entities,
                                                          [Symbol.for("name")]: "CompletedFindEntities"
                                                        }));
                                        });
                                    
                                  }),
                                [Symbol.for("name")]: "UpdateWithSideEffects"
                              };
                      }
                    }
                    if (action.TAG !== /* InputText */0) {
                      return {
                              TAG: 0,
                              _0: {
                                text: state.text,
                                entities: action._0,
                                queueGetEntitesCommand: state.queueGetEntitesCommand
                              },
                              [Symbol.for("name")]: "Update"
                            };
                    }
                    var text = action._0;
                    var delay = Helpers$ReactTemplate.$$Option.withDefault(0.0, searchDelay);
                    return {
                            TAG: 2,
                            _0: {
                              text: text,
                              entities: state.entities,
                              queueGetEntitesCommand: List.concat({
                                    hd: state.queueGetEntitesCommand,
                                    tl: {
                                      hd: {
                                        hd: text,
                                        tl: /* [] */0
                                      },
                                      tl: /* [] */0
                                    }
                                  })
                            },
                            _1: (function (self) {
                                setTimeout((function (param) {
                                        return Curry._1(self.send, /* Dequeue */0);
                                      }), Math.floor(delay) | 0);
                                
                              }),
                            [Symbol.for("name")]: "UpdateWithSideEffects"
                          };
                  }),
                render: (function (self) {
                    var text = self.state.text;
                    return React.createElement("div", undefined, React.createElement("input", {
                                    value: text,
                                    onInput: (function (e) {
                                        var text = e.target.value;
                                        return Curry._1(self.send, {
                                                    TAG: 0,
                                                    _0: text,
                                                    [Symbol.for("name")]: "InputText"
                                                  });
                                      })
                                  }), Curry._1(searchResultView, self.state.entities));
                  })
              });
  };
  return {
          make: IncrementalSearch$IncrementalSearch
        };
}

exports.IncrementalSearch = IncrementalSearch;
/* react Not a pure module */
