// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var ReactCompat = require("reason-react-compat/src/ReactCompat.bs.js");

function PromiseWrapper(D) {
  var PromiseWrapper$PromiseWrapper = function (Props) {
    var promise = Props.promise;
    var whenSuccess = Props.whenSuccess;
    var whenError = Props.whenError;
    var whenPending = Props.whenPending;
    return ReactCompat.useRecordApi({
                willReceiveProps: ReactCompat.component.willReceiveProps,
                willUnmount: ReactCompat.component.willUnmount,
                didUpdate: ReactCompat.component.didUpdate,
                shouldUpdate: ReactCompat.component.shouldUpdate,
                willUpdate: ReactCompat.component.willUpdate,
                didMount: (function (self) {
                    promise.then(function (value) {
                            return Promise.resolve(Curry._1(self.send, {
                                            TAG: 0,
                                            _0: value,
                                            [Symbol.for("name")]: "Completed"
                                          }));
                          }).catch(function (error) {
                          return Promise.resolve(Curry._1(self.send, {
                                          TAG: 1,
                                          _0: error,
                                          [Symbol.for("name")]: "Error"
                                        }));
                        });
                    
                  }),
                initialState: (function (param) {
                    
                  }),
                reducer: (function (action, param) {
                    if (action.TAG === /* Completed */0) {
                      var state = {
                        TAG: 0,
                        _0: action._0,
                        [Symbol.for("name")]: "Success"
                      };
                      return {
                              TAG: 0,
                              _0: state,
                              [Symbol.for("name")]: "Update"
                            };
                    }
                    var state$1 = {
                      TAG: 1,
                      _0: action._0,
                      [Symbol.for("name")]: "Failure"
                    };
                    return {
                            TAG: 0,
                            _0: state$1,
                            [Symbol.for("name")]: "Update"
                          };
                  }),
                render: (function (self) {
                    var result = self.state;
                    if (result !== undefined) {
                      if (result.TAG === /* Success */0) {
                        return Curry._1(whenSuccess, result._0);
                      } else {
                        return Curry._1(whenError, result._0);
                      }
                    } else {
                      return whenPending;
                    }
                  })
              });
  };
  return {
          make: PromiseWrapper$PromiseWrapper
        };
}

exports.PromiseWrapper = PromiseWrapper;
/* ReactCompat Not a pure module */
