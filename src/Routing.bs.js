// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var ReasonReactRouter = require("reason-react/src/ReasonReactRouter.bs.js");
var ReactHelper$ReactTemplate = require("./ReactHelper.bs.js");

function Application(R) {
  var Routing$Application = function (Props) {
    var initialPage = Props.initialPage;
    var onStartTransition = Props.onStartTransition;
    var match = React.useReducer((function (state, action) {
            switch (action.TAG | 0) {
              case /* StartPageLoading */0 :
                  return {
                          page: {
                            TAG: 0,
                            _0: action._0,
                            [Symbol.for("name")]: "InTransition"
                          },
                          lastTransitionTime: action._1
                        };
              case /* LoadedPage */1 :
                  if (action._1 === state.lastTransitionTime) {
                    return {
                            page: {
                              TAG: 1,
                              _0: action._0,
                              [Symbol.for("name")]: "Loaded"
                            },
                            lastTransitionTime: state.lastTransitionTime
                          };
                  } else {
                    return state;
                  }
              case /* DetectedPageLoadError */2 :
                  return {
                          page: {
                            TAG: 1,
                            _0: state.page._0,
                            [Symbol.for("name")]: "Loaded"
                          },
                          lastTransitionTime: state.lastTransitionTime
                        };
              
            }
          }), {
          page: {
            TAG: 1,
            _0: initialPage,
            [Symbol.for("name")]: "Loaded"
          },
          lastTransitionTime: Date.now()
        });
    var dispatch = match[1];
    var state = match[0];
    var transition = function (url) {
      var startTransitionTime = Date.now();
      var route = Curry._2(R.urlToRoute, url, ReactHelper$ReactTemplate.Router.routeToqueryParamMap(url));
      Curry._1(onStartTransition, undefined);
      Curry._1(dispatch, {
            TAG: 0,
            _0: state.page._0,
            _1: startTransitionTime,
            [Symbol.for("name")]: "StartPageLoading"
          });
      Curry._1(R.transition, route).then(function (element) {
              return Promise.resolve(Curry._1(dispatch, {
                              TAG: 1,
                              _0: element,
                              _1: startTransitionTime,
                              [Symbol.for("name")]: "LoadedPage"
                            }));
            }).catch(function (error) {
            Curry._1(dispatch, {
                  TAG: 2,
                  _0: error,
                  [Symbol.for("name")]: "DetectedPageLoadError"
                });
            return Promise.resolve(undefined);
          });
      
    };
    React.useEffect((function () {
            var id = ReasonReactRouter.watchUrl(transition);
            transition(ReasonReactRouter.dangerouslyGetInitialUrl(undefined));
            return (function (param) {
                      return ReasonReactRouter.unwatchUrl(id);
                    });
          }), []);
    return state.page._0;
  };
  return {
          make: Routing$Application
        };
}

exports.Application = Application;
/* react Not a pure module */
