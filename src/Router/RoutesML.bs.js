// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Printf = require("bs-platform/lib/js/printf.js");
var Routes = require("@anuragsoni/routes/src/routes.bs.js");

function sum(a, b) {
  return Curry._3(Printf.sprintf({
                  _0: {
                    TAG: 11,
                    _0: "Sum of ",
                    _1: {
                      TAG: 4,
                      _0: /* Int_d */0,
                      _1: /* No_padding */0,
                      _2: /* No_precision */0,
                      _3: {
                        TAG: 11,
                        _0: " and ",
                        _1: {
                          TAG: 4,
                          _0: /* Int_d */0,
                          _1: /* No_padding */0,
                          _2: /* No_precision */0,
                          _3: {
                            TAG: 11,
                            _0: " = ",
                            _1: {
                              TAG: 4,
                              _0: /* Int_d */0,
                              _1: /* No_padding */0,
                              _2: /* No_precision */0,
                              _3: /* End_of_format */0,
                              [Symbol.for("name")]: "Int"
                            },
                            [Symbol.for("name")]: "String_literal"
                          },
                          [Symbol.for("name")]: "Int"
                        },
                        [Symbol.for("name")]: "String_literal"
                      },
                      [Symbol.for("name")]: "Int"
                    },
                    [Symbol.for("name")]: "String_literal"
                  },
                  _1: "Sum of %d and %d = %d",
                  [Symbol.for("name")]: "Format"
                }), a, b, a + b | 0);
}

function id_handler(id) {
  return Curry._1(Printf.sprintf({
                  _0: {
                    TAG: 11,
                    _0: "Requested user with id ",
                    _1: {
                      TAG: 4,
                      _0: /* Int_d */0,
                      _1: /* No_padding */0,
                      _2: /* No_precision */0,
                      _3: /* End_of_format */0,
                      [Symbol.for("name")]: "Int"
                    },
                    [Symbol.for("name")]: "String_literal"
                  },
                  _1: "Requested user with id %d",
                  [Symbol.for("name")]: "Format"
                }), id);
}

function admin_handler(a) {
  if (a) {
    return "User is admin";
  } else {
    return "User is not an admin";
  }
}

function user(param) {
  return function (param) {
    return Routes.s("user", param);
  };
}

function partial_arg(param) {
  return Routes.s("user", param);
}

var user_and_id = Routes.$slash$question((function (param) {
        return Routes.$slash(partial_arg, Routes.$$int, param);
      }), Routes.nil);

function partial_arg$1(param) {
  return Routes.s("user", param);
}

var user_and_admin = Routes.$slash$question((function (param) {
        return Routes.$slash(partial_arg$1, Routes.bool, param);
      }), Routes.nil);

var q = Routes.$slash$question((function (param) {
        return Routes.s("confusing", param);
      }), Routes.nil);

var routes = Routes.one_of({
      hd: Routes.$at$neg$neg$great(Routes.$slash$question((function (param) {
                  return Routes.s("hi", param);
                }), Routes.nil), "Hello, World"),
      tl: {
        hd: Routes.$at$neg$neg$great(Routes.$slash$question((function (param) {
                    return Routes.$slash((function (param) {
                                  return Routes.$slash((function (param) {
                                                return Routes.s("hello", param);
                                              }), (function (param) {
                                                return Routes.s("from", param);
                                              }), param);
                                }), (function (param) {
                                  return Routes.s("routes", param);
                                }), param);
                  }), Routes.nil), "Hello, Routes"),
        tl: {
          hd: Routes.$at$neg$neg$great(Routes.$slash$question((function (param) {
                      return Routes.$slash((function (param) {
                                    return Routes.$slash((function (param) {
                                                  return Routes.s("sum", param);
                                                }), Routes.$$int, param);
                                  }), Routes.$$int, param);
                    }), Routes.nil), sum),
          tl: {
            hd: Routes.$at$neg$neg$great(user_and_id, id_handler),
            tl: {
              hd: Routes.$at$neg$neg$great(user_and_admin, admin_handler),
              tl: {
                hd: Routes.$at$neg$neg$great(q, "Foobar"),
                tl: /* [] */0
              }
            }
          }
        }
      }
    });

var R = {
  sum: sum,
  id_handler: id_handler,
  admin_handler: admin_handler,
  user: user,
  user_and_id: user_and_id,
  user_and_admin: user_and_admin,
  q: q,
  routes: routes
};

function unwrap_result(r) {
  if (r !== undefined) {
    return r;
  } else {
    return "No match";
  }
}

List.iter((function (target) {
        var r = Routes.match$prime(routes, target);
        console.log(r !== undefined ? r : "No match");
        
      }), {
      hd: "sum/12/127",
      tl: {
        hd: "/hi",
        tl: {
          hd: "/hello/from/routes",
          tl: {
            hd: "/user/121",
            tl: {
              hd: "user/false",
              tl: {
                hd: "confusing/",
                tl: {
                  hd: "confusing",
                  tl: /* [] */0
                }
              }
            }
          }
        }
      }
    });

exports.R = R;
exports.unwrap_result = unwrap_result;
/* user_and_id Not a pure module */
