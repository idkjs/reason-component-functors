// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var ReactCompat = require("reason-react-compat/src/ReactCompat.bs.js");

function positionToAttrString(position) {
  switch (position) {
    case /* Left */0 :
        return "left";
    case /* Right */1 :
        return "right";
    case /* Down */2 :
        return "down";
    case /* Up */3 :
        return "up";
    
  }
}

function sizeToAttrString(size) {
  switch (size) {
    case /* Small */0 :
        return "small";
    case /* Medium */1 :
        return "medium";
    case /* Large */2 :
        return "large";
    case /* XLarge */3 :
        return "xlarge";
    case /* Fit */4 :
        return "fit";
    
  }
}

function Tooltip(Props) {
  var position = Props.position;
  var size = Props.size;
  var text = Props.text;
  var parent = Props.parent;
  return ReactCompat.useRecordApi({
              willReceiveProps: ReactCompat.component.willReceiveProps,
              willUnmount: ReactCompat.component.willUnmount,
              didUpdate: ReactCompat.component.didUpdate,
              shouldUpdate: ReactCompat.component.shouldUpdate,
              willUpdate: ReactCompat.component.willUpdate,
              didMount: ReactCompat.component.didMount,
              initialState: (function (param) {
                  return {
                          isOpen: false
                        };
                }),
              reducer: (function (action, param) {
                  if (action) {
                    return {
                            TAG: 0,
                            _0: {
                              isOpen: false
                            },
                            [Symbol.for("name")]: "Update"
                          };
                  } else {
                    return {
                            TAG: 0,
                            _0: {
                              isOpen: true
                            },
                            [Symbol.for("name")]: "Update"
                          };
                  }
                }),
              render: (function (self) {
                  return React.cloneElement(parent, {
                              "data-balloon-length": sizeToAttrString(size),
                              "data-balloon": text,
                              "data-balloon-pos": positionToAttrString(position),
                              onMouseOver: (function (param) {
                                  return Curry._1(self.send, /* Open */0);
                                }),
                              onMouseLeave: (function (param) {
                                  return Curry._1(self.send, /* Close */1);
                                })
                            });
                })
            });
}

var make = Tooltip;

exports.positionToAttrString = positionToAttrString;
exports.sizeToAttrString = sizeToAttrString;
exports.make = make;
/* react Not a pure module */
