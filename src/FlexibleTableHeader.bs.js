// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");

function getWidthSize(size) {
  if (typeof size !== "number") {
    return size._0;
  }
  switch (size) {
    case /* Small */0 :
        return 7.0;
    case /* Medium */1 :
        return 9.5;
    case /* Large */2 :
        return 12.0;
    
  }
}

function headerItemToJs(param) {
  return {
          column: param.column,
          size: param.size,
          isSizeFixed: param.isSizeFixed
        };
}

function headerItemFromJs(param) {
  return {
          column: param.column,
          size: param.size,
          isSizeFixed: param.isSizeFixed
        };
}

function valueToString(func, value) {
  return JSON.stringify(Curry._1(func, value));
}

function stringFromValue(func, anyString) {
  return Curry._1(func, JSON.parse(anyString));
}

function getWidthSizeByTableWidthSize(tableWidthSize, header) {
  var getHeaderItemWidthSize = function (headerItem) {
    return getWidthSize(headerItem.size);
  };
  var headerSizeList = List.map(getHeaderItemWidthSize, header);
  var totalHeaderSize = List.fold_left((function (prim, prim$1) {
          return prim + prim$1;
        }), 0.0, headerSizeList);
  if (tableWidthSize <= totalHeaderSize) {
    if (tableWidthSize === 0.0) {
      return List.map((function (headerItem) {
                    return {
                            column: headerItem.column,
                            size: {
                              _0: 0.0,
                              [Symbol.for("name")]: "Free"
                            },
                            isSizeFixed: headerItem.isSizeFixed
                          };
                  }), header);
    } else {
      return header;
    }
  }
  var flexibleSizeHeaderCount = List.length(List.filter(function (header) {
              return !header.isSizeFixed;
            })(header));
  var totalSizeFiexedWidth = List.fold_left((function (prim, prim$1) {
          return prim + prim$1;
        }), 0.0, List.map(getHeaderItemWidthSize, List.filter(function (header) {
                  return header.isSizeFixed;
                })(header)));
  var headerSize = (tableWidthSize - totalSizeFiexedWidth) / flexibleSizeHeaderCount;
  return List.map((function (headerItem) {
                return {
                        column: headerItem.column,
                        size: {
                          _0: headerSize,
                          [Symbol.for("name")]: "Free"
                        },
                        isSizeFixed: headerItem.isSizeFixed
                      };
              }), header);
}

exports.getWidthSize = getWidthSize;
exports.headerItemToJs = headerItemToJs;
exports.headerItemFromJs = headerItemFromJs;
exports.valueToString = valueToString;
exports.stringFromValue = stringFromValue;
exports.getWidthSizeByTableWidthSize = getWidthSizeByTableWidthSize;
/* No side effect */
